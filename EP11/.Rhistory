gc()
knitr::opts_chunk$set(echo = TRUE)
# AMIGO TECNOLOGICO A TENER EN CUENTA
# Instalar y cargar el paquete 'caret' si aún no está instalado
install.packages("caret")
datos <- read.csv2("EP09 Datos.csv")
datos$IMC <- NULL
datos[["IMC"]] <- (datos$Weight / (datos$Height/100)^2)
datos$EN <- NULL
datos[["EN"]] <- ifelse(datos$IMC >= 25, "sobrepeso", "no sobrepeso")
set.seed(20072)
con <- filter(datos, EN == "sobrepeso")
sin <- filter(datos, EN == "no sobrepeso")
con <- filter(datos, EN == "sobrepeso")
library(dplyr)
library(leaps)
library(caret)
datos$IMC <- NULL
datos$IMC <- NULL
datos[["IMC"]] <- (datos$Weight / (datos$Height/100)^2)
datos$IMC <- NULL
datos[["IMC"]] <- (datos$Weight / (datos$Height/100)^2)
datos$EN <- NULL
datos[["EN"]] <- ifelse(datos$IMC >= 25, "sobrepeso", "no sobrepeso")
set.seed(20072)
con <- filter(datos, EN == "sobrepeso")
sin <- filter(datos, EN == "no sobrepeso")
muestraA <- con[sample(nrow(con), 50), ]
muestraB <- sin[sample(nrow(sin), 50), ]
muestra <- rbind(muestraA, muestraB)
# Variables a obviar (Weight, IMC, EN)
variables <- c(23, 26, 27)
variables_seleccionadas <- colnames(muestra)[-variables]
formula_reg <- as.formula(paste("Weight ~", paste(variables_seleccionadas, collapse = " + ")))
# Busqueda exhaustiva en donde se analizan 8 subconjuntos
reg_results <- regsubsets(formula_reg, data = muestra, nvmax = 8, nbest = 1)
formula_reg
# Busqueda exhaustiva en donde se analizan 8 subconjuntos
reg_results <- regsubsets(formula_reg, data = muestra, nvmax = 8, nbest = 1)
summary(reg_results)$which
# Se grafican los modelos en donde cada valor horizontal representa uno, cada cuadro de color implica el uso de la variable en el modelo, por el principio de parsimonia se busca utilizar el que utilice menos variables, en este caso el que posee BIC de -370 con las variables
# Chest.Girth, Waist.Girth,Thigh.Girth, Forearm.Girth, Knee.Girth, Calf.Maximum.Girth y Height
plot(reg_results)
# Se grafican los modelos en donde cada valor horizontal representa uno, cada cuadro de color implica el uso de la variable en el modelo, por el principio de parsimonia se busca utilizar el que utilice menos variables, en este caso el que posee BIC de -370 con las variables
# Chest.Girth, Waist.Girth,Thigh.Girth, Forearm.Girth, Knee.Girth, Calf.Maximum.Girth y Height
plot(reg_results)
plot(reg_results)
datos <- read.csv2("EP09 Datos.csv")
datos$IMC <- NULL
datos[["IMC"]] <- (datos$Weight / (datos$Height/100)^2)
datos$EN <- NULL
datos[["EN"]] <- ifelse(datos$IMC >= 25, "sobrepeso", "no sobrepeso")
set.seed(20072)
con <- filter(datos, EN == "sobrepeso")
sin <- filter(datos, EN == "no sobrepeso")
muestraA <- con[sample(nrow(con), 50), ]
muestraB <- sin[sample(nrow(sin), 50), ]
muestra <- rbind(muestraA, muestraB)
# Variables a obviar (Weight, IMC, EN)
variables <- c(23, 26, 27)
variables_seleccionadas <- colnames(muestra)[-variables]
formula_reg <- as.formula(paste("Weight ~", paste(variables_seleccionadas, collapse = " + ")))
# Busqueda exhaustiva en donde se analizan 8 subconjuntos
reg_results <- regsubsets(formula_reg, data = muestra, nvmax = 8, nbest = 1)
summary(reg_results)$which
plot(reg_results)
# Se grafican los modelos en donde cada valor horizontal representa uno, cada cuadro de color implica el uso de la variable en el modelo, por el principio de parsimonia se busca utilizar el que utilice menos variables, en este caso el que posee BIC de -370 con las variables
# Chest.Girth, Waist.Girth,Thigh.Girth, Forearm.Girth, Knee.Girth, Calf.Maximum.Girth y Height
plot(reg_results)
# Se grafican los modelos en donde cada valor horizontal representa uno, cada cuadro de color implica el uso de la variable en el modelo, por el principio de parsimonia se busca utilizar el que utilice menos variables, en este caso el que posee BIC de -370 con las variables
# Chest.Girth, Waist.Girth,Thigh.Girth, Forearm.Girth, Knee.Girth, Calf.Maximum.Girth y Height
plot(reg_results)
# Seleccionar las variables basadas en el análisis de 'regsubsets'
variables_modelo <- c("Chest.Girth", "Waist.Girth", "Thigh.Girth",
"Forearm.Girth", "Knee.Girth", "Calf.Maximum.Girth", "Height")
# Crear la fórmula para el modelo de regresión lineal
formula_modelo <- as.formula(paste("Weight ~", paste(variables_modelo, collapse = " + ")))
# Construir el modelo de regresión lineal múltiple
modelo_final <- lm(formula_modelo, data = muestra)
# Configuración para bootstrapping
set.seed(20072)  # Establecer la semilla para reproducibilidad
train_control <- trainControl(method = "boot", number = 1000)  # 1000 iteraciones de bootstrap
train_control <- trainControl(method = "boot", number = 999)  # 1000 iteraciones de bootstrap
# Evaluar el modelo con bootstrapping
modelo_bootstrapped <- train(formula_modelo, data = muestra, method = "lm", trControl = train_control)
# Evaluar el modelo con bootstrapping
modelo_bootstrapped <- train(formula_modelo, data = muestra, method = "lm", trControl = train_control)
# Ver los resultados
print(modelo_bootstrapped)
train_control <- trainControl(method = "boot", number = 1000)  # 1000 iteraciones de bootstrap
# Evaluar el modelo con bootstrapping
modelo_bootstrapped <- train(formula_modelo, data = muestra, method = "lm", trControl = train_control)
# Evaluar el modelo con bootstrapping
modelo_bootstrapped <- train(formula_modelo, data = muestra, method = "lm", trControl = train_control)
# Ver los resultados
print(modelo_bootstrapped)
# Ver los resultados
summary(modelo_bootstrapped)
# Se grafican los modelos en donde cada valor horizontal representa uno, cada cuadro de color implica el uso de la variable en el modelo, por el principio de parsimonia se busca utilizar el que utilice menos variables, en este caso el que posee BIC de -370 con las variables
# Chest.Girth, Waist.Girth,Thigh.Girth, Forearm.Girth, Knee.Girth, Calf.Maximum.Girth y Height
plot(reg_results)
library(dplyr)
library(leaps)
library(caret)
datos <- read.csv2("EP09 Datos.csv")
datos$IMC <- NULL
datos[["IMC"]] <- (datos$Weight / (datos$Height/100)^2)
datos$EN <- NULL
datos[["EN"]] <- ifelse(datos$IMC >= 25, "sobrepeso", "no sobrepeso")
set.seed(20072)
con <- filter(datos, EN == "sobrepeso")
sin <- filter(datos, EN == "no sobrepeso")
muestraA <- con[sample(nrow(con), 50), ]
muestraB <- sin[sample(nrow(sin), 50), ]
muestra <- rbind(muestraA, muestraB)
# Variables a obviar (Weight, IMC, EN)
variables <- c(23, 26, 27)
variables_seleccionadas <- colnames(muestra)[-variables]
formula_reg <- as.formula(paste("Weight ~", paste(variables_seleccionadas, collapse = " + ")))
# Busqueda exhaustiva en donde se analizan 8 subconjuntos
reg_results <- regsubsets(formula_reg, data = muestra, nvmax = 8, nbest = 1)
summary(reg_results)$which
# Se grafican los modelos en donde cada valor horizontal representa uno, cada cuadro de color implica el uso de la variable en el modelo, por el principio de parsimonia se busca utilizar el que utilice menos variables, en este caso el que posee BIC de -370 con las variables
# Chest.Girth, Waist.Girth,Thigh.Girth, Forearm.Girth, Knee.Girth, Calf.Maximum.Girth y Height
plot(reg_results)
# Weight ~ Biacromial.diameter + Biiliac.diameter + Bitrochanteric.diameter +
#     Chest.depth + Chest.diameter + Elbows.diameter + Wrists.diameter +
#     Knees.diameter + Ankles.diameter + Shoulder.Girth + Chest.Girth +
#     Waist.Girth + Navel.Girth + Hip.Girth + Thigh.Girth + Bicep.Girth +
#     Forearm.Girth + Knee.Girth + Calf.Maximum.Girth + Ankle.Minimum.Girth +
#     Wrist.Minimum.Girth + Age + Height + Gender
# AMIGO TECNOLOGICO A TENER EN CUENTA
# Instalar y cargar el paquete 'caret' si aún no está instalado
install.packages("caret")
library(caret)
# Seleccionar las variables basadas en el análisis de 'regsubsets'
variables_modelo <- c("Chest.Girth", "Waist.Girth", "Thigh.Girth",
"Forearm.Girth", "Knee.Girth", "Calf.Maximum.Girth", "Height")
# Crear la fórmula para el modelo de regresión lineal
formula_modelo <- as.formula(paste("Weight ~", paste(variables_modelo, collapse = " + ")))
# Construir el modelo de regresión lineal múltiple
modelo_final <- lm(formula_modelo, data = muestra)
# Configuración para bootstrapping
set.seed(20072)  # Establecer la semilla para reproducibilidad
train_control <- trainControl(method = "boot", number = 1000)  # 1000 iteraciones de bootstrap
# Evaluar el modelo con bootstrapping
modelo_bootstrapped <- train(formula_modelo, data = muestra, method = "lm", trControl = train_control)
install.packages("caret")
# Ver los resultados
summary(modelo_bootstrapped)
# prediccion RFE para IMC
variables <- c(23, 24, 27)
temp <- muestra[-variables]
colnames(temp)
x <- temp[-24]
y <- temp[24]
control <- rfeControl(functions = lmFuncs, method = "repeatedcv", number = 5, repeats = 5)
modelo_rfe <- rfe(temp[,1:23], temp[,24], sizes = 10:20, rfeControl = control)
predictors(modelo_rfe)
plot(modelo_rfe, type = c("g", "o"))
modelo_rfe$pred
modelo_rfe$bestSubset
modelo_rfe$optVariables
modelo_rfe$
```
modelo_rfe$optsize
modelo_rfe$obsLevels
modelo_rfe$resampledCM
# se quitan las variables indicadas
variables <- c(23, 24, 27)
muestra_reducida <- muestra[-variables]
set.seed(20072)
# generacion del modelo RFE
control <- rfeControl(functions = lmFuncs, method = "repeatedcv", number = 5, repeats = 5)
modelo_rfe <- rfe(muestra_reducida[, 1:23], muestra_reducida[, 24], sizes = c(10:20), rfeControl = control, metric = "Rsquared")
modelo_rfe <- rfe(muestra_reducida[, 1:23], muestra_reducida[, 24], sizes = c(10:20), rfeControl = control, metric = "Rsquared")
predictors(modelo_rfe)
